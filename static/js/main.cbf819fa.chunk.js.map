{"version":3,"sources":["logo.svg","components/card-list/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","a","fetch","stuff","json","users","console","log","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAAe,I,wBCGFA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAAAR,GAAK,OAMzB,aALA,CAKA,OAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,aADyD,CACzD,SAAOZ,UAAU,SACba,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCLZG,E,kDACJ,aAAe,IAAD,8BACZ,gBAkEFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlErC,EAAKC,MAAQ,CAQXb,SAAS,GACTU,YAAa,IAXH,E,0CAkCd,WAEE,MAAgCI,KAAKD,MAA9Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YAIXK,EAAmBf,EAASgB,QAAO,SAAArB,GAAO,OAC9CA,EAAQE,KAAKoB,cAAcC,SAASR,EAAYO,kBAClD,OACE,sBAAKzB,UAAU,MAAf,UAQC,oDAKA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcU,KAAKV,eAC3D,uBACA,8BAAK,cAAC,EAAD,CAAUJ,SAAUe,W,sEAmB/B,8BAAAI,EAAA,sEAQsBC,MAAM,8CAR5B,cAQQC,EARR,gBASsBA,EAAMC,OAT5B,OASQC,EATR,OAUEC,QAAQC,IAAIF,GACZT,KAAKL,SAAS,CAACT,SAAUuB,IAX3B,gD,2DA9EgBG,aAoJHnB,IC9IAoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cbf819fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from './card/card.component';\n\nexport const CardList = props => (\n    //console.log(props);\n    //Anything that's inside the <CardList></CardList> component is a 'children' \n    //and can be accessed through props.children\n    //return (<div className='card-list'>{props.children}</div>);\n    \n    <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster}/>\n    ))}\n    </div>\n);\n\n/*\nThe following code using the curley braces for the props => {} arrow function\nThe arrow function with burley braces create a code block that requires 'manual' \nreturn to be specificed... */\n\n// export const CardList = props => {\n//     //console.log(props);\n//     //Anything that's inside the <CardList></CardList> component is a 'children' \n//     //and can be accessed through props.children\n//     //return (<div className='card-list'>{props.children}</div>);\n//     return (\n//     <div className='card-list'>\n//     {props.monsters.map(monster => (\n//             <h1 key={monster.id}>{monster.name}</h1>\n//     ))}\n//     </div>\n//     );\n// };","import React from \"react\";\n\nimport './search-box.styles.css';\n\n//Functional components do not have access to lifecycle methods and component constructor\n//Functional components are basically used to retrieve/store some props and\n//return HTML\nexport const SearchBox = ({placeholder, handleChange}) => (  //See below using the 'props' object \n    <input className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}       \n    />\n);\n\n//The above function can be written using only one big 'props' object in the arrow function\n/*\nexport const SearchBox = (props) => (  //The function argument is destructured from the single 'props' object \n    <input className='search'\n        type='search'\n        placeholder={props.placeholder}\n        onChange={props.handleChange}       \n    />\n);\n*/","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // We don't need to populate anything for the monsters array anymore.. \n      // because we will get the value for the monsters array from the remote endpoint\n      // monsters: [\n      //   {name: 'Frankenstein',  id: 'asc1'},\n      //   {name: 'Dracula',       id: 'asc2'},\n      //   {name: 'Zombie',        id: 'asc3'}\n      // ] \n      monsters:[],\n      searchField: ''\n    };\n\n    //TEST\n    //this.handleClick1 = this.handleClick1.bind(this);\n    //this.handleClick2 = this.handleClick1.bind(this);\n\n    //Bind 'this' context to the 'handleChange' method in the constructor\n    //But we don't need to do this if we use the arrow function construct \n    //as shown in the method implementation down below\n    //this.handleChange = this.handleChange.bind(this); \n  }\n\n  /*\n  //TEST\n  handleClick1() {\n    console.log(\"button 1 clicked\");\n    //console.log(this);\n  }\n  //TEST\n  handleClick3 = () => console.log(\"button 3 clicked\");\n  */\n\n  render() {\n    //Destructing to make the \"state\" a local variable\n    const {monsters, searchField} = this.state;\n    //Equivalent to the following two separate assignments\n    //const monsters = this.state.monsters;\n    //const searchField = this.state.searchField;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        {/* TEST */}\n        {/* The 'this.handClick1()' function is here so it's executed immediately\n        <button onClick={this.handleClick1()}>click 1</button>\n        <button onClick={this.handleClick1}>click 2</button>\n        <button onClick={this.handleClick2}>click 3</button>\n        <button onClick={this.handleClick3}>click 4</button>\n        */}\n       <h1> Monsters Rolodex </h1>\n       {/* \n         This will work without binding the handleChange method in the constructor \n        <SearchBox placeholder='search monsters' handleChange={e=>this.handleChange(e)}/>\n       */}\n       <SearchBox placeholder='search monsters' handleChange={this.handleChange}/>\n        <br/>\n        <div><CardList monsters={filteredMonsters}/></div>\n        \n      </div>\n    );\n  }\n\n  //With this arrow function construct inside the class, the binding of this is done automatically\n  //by the javascript when the component is created.. The handleChange(e) {} + the binding inside the\n  //constructor is no longer needed\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n  /*\n  handleChange(e) {\n    this.setState({searchField: e.target.value});\n  }\n  */\n\n  //Lifecycle method\n  async componentDidMount() {\n    // The following is an older style for handling promises...\n    // Using \"async\" & \"await\" makes the program easier to read\n    \n    // fetch('https://jsonplaceholder.typicode.com/users')\n    // .then(response => response.json())\n    // .then(users => this.setState({monsters: users}));\n\n    const stuff = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await stuff.json();\n    console.log(users);\n    this.setState({monsters: users});\n   \n\n  }\n}\n\n/*\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      string: 'Hello Kaylee'\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          \n          <p>{this.state.string}</p>\n          <button onClick={() => this.setState({string: 'Hello Kevin'})}>Change Text</button>\n        \n        </header>\n      </div>\n    );\n  }\n}\n*/\n\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}